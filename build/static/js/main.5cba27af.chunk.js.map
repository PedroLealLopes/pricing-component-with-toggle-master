{"version":3,"sources":["components/Background.js","components/PricingHeader.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Background","class","src","alt","PricingHeader","handler","monthly","className","aria-label","onClick","Card","isMonthly","isMain","header","price","row1","row2","row3","annually","App","props","state","bind","this","setState","count","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAgBeA,MAdf,WACE,OACE,6BACE,yBAAKC,MAAM,aACT,yBAAKC,IAAI,yBAAyBC,IAAI,oCAExC,yBAAKF,MAAM,UACT,yBAAKC,IAAI,sBAAsBC,IAAI,mCCO5BC,EAdO,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QAC/B,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,wBAAf,eACA,0BAAMA,UAAU,0BAAhB,WAEE,0BAAMA,UAAU,yBACd,4BAAQC,aAAW,wCAAwCC,QAAWJ,EAASE,UAAWD,EAAU,qBAAuB,kDAH/H,aC8CSI,EAlDF,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,UAAWC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC3D,OACE,yBAAKV,UAAWK,EAAS,iBAAmB,QAC1C,yBAAKL,UAAWK,EAAS,mBAAqB,eAC3CC,GAEH,yBAAKN,UAAU,cACb,0BAAMA,UAAU,qBAAhB,KACCI,EAAYG,EAAMR,QAAUQ,EAAMI,UAGrC,yBAAKX,UAAU,uBACb,6BACE,wBACEA,UACEK,EAAS,2BAA6B,wBAG1C,yBAAKL,UAAU,aAAaQ,GAC5B,wBACER,UACEK,EAAS,2BAA6B,yBAI5C,6BACE,yBAAKL,UAAU,aAAaS,IAE9B,6BACE,wBACET,UACEK,EAAS,2BAA6B,wBAG1C,yBAAKL,UAAU,aAAaU,GAC5B,wBACEV,UACEK,EAAS,2BAA6B,0BAM9C,4BAAQL,UAAWK,EAAS,eAAiB,OAA7C,gBCxCeO,E,kDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CAACV,WAAW,GAEzB,EAAKN,QAAU,EAAKA,QAAQiB,KAAb,gBALC,E,sDAUhBC,KAAKC,UAAS,SAAAH,GAAK,MAAK,CACtBV,WAAYU,EAAMV,gB,+BAqCpB,OACE,6BACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAeL,QAASiB,KAAKF,MAAMV,UAAWN,QAASkB,KAAKlB,UAC3DkB,KAAKF,MAAMI,MAEZ,yBAAKlB,UAAU,WACb,kBAAC,EAAD,iBAxCU,CACZM,OAAQ,QACRC,MAAO,CACLI,SAAU,SACVZ,QAAS,SAEXS,KAAM,iBACNC,KAAM,kBACNC,KAAM,mBAgCJ,CAAiBN,UAAWY,KAAKF,MAAMV,aACvC,kBAAC,EAAD,iBA9BiB,CACnBE,OAAQ,eACRC,MAAO,CACLI,SAAU,SACVZ,QAAS,SAEXS,KAAM,eACNC,KAAM,kBACNC,KAAM,oBAsBJ,CAAwBL,QAAM,EAACD,UAAWY,KAAKF,MAAMV,aACrD,kBAAC,EAAD,iBArBW,CACbE,OAAQ,SACRC,MAAO,CACLI,SAAU,SACVZ,QAAS,SAEXS,KAAM,eACNC,KAAM,mBACNC,KAAM,oBAaJ,CAAkBN,UAAWY,KAAKF,MAAMV,mB,GA3Dfe,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5cba27af.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Background() {\r\n  return (\r\n    <div>\r\n      <div class=\"bg-bottom\">\r\n        <img src=\"./images/bg-bottom.svg\" alt=\"background lines at the bottom\" />\r\n      </div>\r\n      <div class=\"bg-top\">\r\n        <img src=\"./images/bg-top.svg\" alt=\"background lines at the top\" />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Background;\r\n","import React from 'react';\n\nconst PricingHeader = ({handler, monthly}) => {\n  return (\n    <div className=\"pricing-header-container\">\n      <div className=\"pricing-header-title\">Our Pricing</div>\n      <span className=\"pricing-header-content\">\n        Annually \n        <span className='pricing-header-btn-bg'>\n          <button aria-label=\"Annually or Monthly toggleable button\" onClick = {handler} className={monthly ? 'pricing-header-btn' : 'pricing-header-btn pricing-header-btn-active'}></button>\n        </span>\n        Monthly\n      </span>\n    </div>);  \n}\n\nexport default PricingHeader;\n","import React from 'react'\r\n\r\nconst Card = ({isMonthly, isMain, header, price, row1, row2, row3 }) => {\r\n  return (\r\n    <div className={isMain ? 'card card-main' : 'card'}>\r\n      <div className={isMain ? 'card-header-main' : 'card-header'}>\r\n        {header}\r\n      </div>\r\n      <div className='card-price'>\r\n        <span className='card-price-dollar'>$</span>\r\n        {isMonthly ? price.monthly : price.annually}\r\n      </div>\r\n\r\n      <div className='card-info-container'>\r\n        <div>\r\n          <hr\r\n            className={\r\n              isMain ? 'card-info-seperator-main' : 'card-info-seperator'\r\n            }\r\n          />\r\n          <div className='card-info'>{row1}</div>\r\n          <hr\r\n            className={\r\n              isMain ? 'card-info-seperator-main' : 'card-info-seperator'\r\n            }\r\n          />\r\n        </div>\r\n        <div>\r\n          <div className='card-info'>{row2}</div>\r\n        </div>\r\n        <div>\r\n          <hr\r\n            className={\r\n              isMain ? 'card-info-seperator-main' : 'card-info-seperator'\r\n            }\r\n          />\r\n          <div className='card-info'>{row3}</div>\r\n          <hr\r\n            className={\r\n              isMain ? 'card-info-seperator-main' : 'card-info-seperator'\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <button className={isMain ? 'btn btn-main' : 'btn'}>\r\n        LEARN MORE\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\nimport Background from './components/Background'\nimport PricingHeader from './components/PricingHeader'\nimport Card from './components/Card'\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {isMonthly: false};\n\n    this.handler = this.handler.bind(this);\n  }\n\n\n  handler(){\n    this.setState(state => ({\n      isMonthly: !state.isMonthly\n    }));\n  }\n\n  render () {\n    const basic = {\n      header: 'Basic',\n      price: {\n        annually: '199.99',\n        monthly: '19.99'\n      },\n      row1: '500 GB Storage',\n      row2: '2 Users Allowed',\n      row3: 'Send up to 3 GB'\n    }\n    \n    const professional = {\n      header: 'Professional',\n      price: {\n        annually: '249.99',\n        monthly: '24.99'\n      },\n      row1: '1 TB Storage',\n      row2: '5 Users Allowed',\n      row3: 'Send up to 10 GB'\n    }\n    const master = {\n      header: 'Master',\n      price: {\n        annually: '399.99',\n        monthly: '39.99'\n      },\n      row1: '2 TB Storage',\n      row2: '10 Users Allowed',\n      row3: 'Send up to 20 GB'\n    }\n\n    return (\n      <div>\n      <Background />\n      \n      <PricingHeader monthly={this.state.isMonthly} handler={this.handler} />\n      {this.state.count}\n\n      <div className=\"content\">\n        <Card {...basic} isMonthly={this.state.isMonthly} />\n        <Card {...professional} isMain isMonthly={this.state.isMonthly} />\n        <Card {...master} isMonthly={this.state.isMonthly} />\n      </div>\n    </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}